(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{456:function(_,v,t){_.exports=t.p+"assets/img/image-20210916205802101.2647877e.png"},457:function(_,v,t){_.exports=t.p+"assets/img/image-20210916210309079.66789143.png"},519:function(_,v,t){"use strict";t.r(v);var r=t(24),s=Object(r.a)({},(function(){var _=this,v=_.$createElement,r=_._self._c||v;return r("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[r("h1",{attrs:{id:"대표적인-소프트웨어-아키텍처-패턴-알아보기-클린-아키텍처"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#대표적인-소프트웨어-아키텍처-패턴-알아보기-클린-아키텍처"}},[_._v("#")]),_._v(" 대표적인 소프트웨어 아키텍처 패턴 알아보기 - 클린 아키텍처")]),_._v(" "),r("p",[_._v("이번 시간에는 "),r("code",[_._v("클린 아키텍처")]),_._v("의 개념과 핵심적인 내용에 대해 알아보겠습니다.")]),_._v(" "),r("br"),_._v(" "),r("h2",{attrs:{id:"개요"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#개요"}},[_._v("#")]),_._v(" 개요")]),_._v(" "),r("p",[r("a",{attrs:{href:"http://www.yes24.com/Product/Goods/77283734",target:"_blank",rel:"noopener noreferrer"}},[_._v('"클린 아키텍처"'),r("OutboundLink")],1),_._v(" 는 유명한 프로그래머인 로버트 C. 마틴이 처음에 언급한 개념입니다.")]),_._v(" "),r("p",[_._v("책에서는 아키텍처에 대해 다음과 같이 말합니다.")]),_._v(" "),r("ul",[r("li",[_._v("좋은 아키텍처는 시스템을 "),r("strong",[_._v("쉽게")]),_._v(" ("),r("strong",[_._v("이해")]),_._v("하고, "),r("strong",[_._v("개발")]),_._v("하며, "),r("strong",[_._v("유지보수")]),_._v("하고, "),r("strong",[_._v("배포")]),_._v(")할 수 있게 한다.")]),_._v(" "),r("li",[_._v("아키텍처는 시스템의 "),r("strong",[_._v("동작 여부 자체")]),_._v("와는 거의 관련이 없다.")]),_._v(" "),r("li",[_._v("아키텍처는 소프트웨어를 "),r("strong",[_._v("유연하고 부드럽게")]),_._v(" 구조화한다.")]),_._v(" "),r("li",[_._v("좋은 아키텍트는 시스템의 "),r("strong",[_._v("핵심적인 요소("),r("code",[_._v("정책")]),_._v(")를 식별")]),_._v("하고, 동시에 "),r("code",[_._v("세부사항")]),_._v("은 이 정책에 무관하게 만들 수 있는 형태로 시스템을 구축한다.")]),_._v(" "),r("li",[_._v("좋은 아키텍트는 "),r("strong",[_._v("세부사항에 대한 결정을 가능한 한 오랫동안 미룰 수 있는 방향으로")]),_._v(" 정책을 설계한다.")])]),_._v(" "),r("p",[_._v("클린 아키텍처는 이러한 내용을 고려해서 엔터프라이즈 애플리케이션에서도 적용될 수 있도록 만들어진 아키텍처 패턴입니다.")]),_._v(" "),r("p",[_._v("클린 아키텍처의 핵심적인 내용을 정리하면 다음과 같습니다.")]),_._v(" "),r("ol",[r("li",[_._v("세부 사항(DB, 프레임워크)가 정책(업무 규칙)에 영향을 주면 안 된다.")]),_._v(" "),r("li",[_._v("계층별로 관심사를 명확하게 분리하여 변경이 필요할 때 영향을 주는 부분을 최소화한다.")]),_._v(" "),r("li",[_._v("내부 계층이 외부 계층을 의존하지 않아야 한다(의존성 흐름은 바깥에서 안으로)")])]),_._v(" "),r("h2",{attrs:{id:"형태"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#형태"}},[_._v("#")]),_._v(" 형태")]),_._v(" "),r("p",[_._v("앞서 소개한 아키텍처들과 마찬가지로, 클린 아키텍처 역시 관심사 단위로 레이어를 나눕니다.")]),_._v(" "),r("p",[r("img",{attrs:{src:"https://blog.kakaocdn.net/dn/lxciD/btqG3lIG6ym/kcSRUhV2779YNl8j0ELiO1/img.jpg",alt:"img"}}),_._v("\n(출처 : Credit: 도서출판 인사이트)")]),_._v(" "),r("ul",[r("li",[r("strong",[_._v("엔티티")]),_._v(" "),r("ul",[r("li",[_._v("핵심 업무 규칙을 캡슐화합니다.")]),_._v(" "),r("li",[_._v("메서드를 가지는 객체 거나 일련의 데이터 구조와 함수의 집합일 수 있습니다.")]),_._v(" "),r("li",[_._v("가장 변하지 않고, 외부로부터 영향받지 않는 영역입니다.")])])]),_._v(" "),r("li",[r("strong",[_._v("유스 케이스")]),_._v(" "),r("ul",[r("li",[_._v("애플리케이션에 특화된 업무 규칙을 포함합니다.")]),_._v(" "),r("li",[_._v("시스템의 모든 유스 케이스를 캡슐화하고 구현합니다.")]),_._v(" "),r("li",[_._v("엔티티로 들어오고 나가는 데이터 흐름을 조정하고 조작합니다.")])])]),_._v(" "),r("li",[r("strong",[_._v("인터페이스 어댑터")]),_._v(" "),r("ul",[r("li",[_._v("일련의 어댑터들로 구성됩니다.")]),_._v(" "),r("li",[_._v("어댑터는 데이터를 (유스 케이스와 엔티티에 가장 편리한 형식) <-> (데이터베이스나 웹 같은 외부 에이전시에 가장 편리한 형식)으로 변환합니다.")]),_._v(" "),r("li",[_._v("컨트롤러(Controller), 프레젠터(Presenter), 게이트웨이(Gateway) 등이 여기에 속합니다.")])])]),_._v(" "),r("li",[r("strong",[_._v("프레임워크와 드라이버")]),_._v(" "),r("ul",[r("li",[_._v("시스템의 핵심 업무와는 관련 없는 세부 사항입니다. 언제든 갈아 끼울 수 있습니다.")]),_._v(" "),r("li",[_._v("프레임워크나, 데이터베이스, 웹서버 등이 여기에 해당합니다.")])])])]),_._v(" "),r("p",[_._v("레이어는 상황에 따라 4가지 이상일 수 있습니다.")]),_._v(" "),r("p",[_._v("핵심은 안쪽 영역으로 갈수록 추상화와 정책의 수준이 높아지고, 반대로 바깥쪽 영역으로 갈수록 구체적인 세부사항으로 구성된다는 것입니다.\n안쪽 영역으로 갈수록 고수준이라고 하며, 바깥쪽으로 갈수록 저수준이라고 합니다.")]),_._v(" "),r("h2",{attrs:{id:"의존-방향-규칙"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#의존-방향-규칙"}},[_._v("#")]),_._v(" 의존 방향 규칙")]),_._v(" "),r("p",[_._v("의존성 방향은 항상 저수준에서 고수준으로 흘러야 합니다. 즉 바깥쪽 원에서 안쪽 원으로 의존성이 있어야 한다는 것입니다.\n반대로 고수준에서 저수준으로 의존성이 흐르면 안 됩니다. 안쪽 원은 바깥쪽 원의 어떤 것도 알지 못해야 합니다.")]),_._v(" "),r("p",[_._v("그러나 실제로 애플리케이션이 동작할 때는 제어 흐름은 이런 의존 흐름과는 반대입니다."),r("br"),_._v('\n예를 들어, "유저 생성하기" 서비스는 유저를 저장하기 위해 유저 DB에 연동된 리포지터리를 사용할 것입니다.'),r("br"),_._v("\n서비스는 유즈 케이스 영역이고, 리포지토리는 프레임워크&드라이버(인프라스트럭처) 영역이므로, 유즈 케이스 영역에서 프레임워크&드라이버로 실행 흐름이 생기게 됩니다.\n고수준이 저수준에 의존하고 있는 것이므로, 이는 의존성 역전 원칙을 위반합니다.")]),_._v(" "),r("p",[r("img",{attrs:{src:t(456),alt:"이미지1"}}),_._v(" "),r("br")]),_._v(" "),r("p",[_._v("클린 아키텍처에서는 이런 의존성 방향을 제어하기 위해, "),r("code",[_._v("의존성 역전")]),_._v(" 원칙을 지킵니다.\n즉 추상화된 인터페이스를 고수준 레이어에 두고, 이 인터페이스를 사용합니다. 그리고 저수준에는 이 인터페이스를 상속받는 객체를 구현합니다.\n이렇게 하면 고수준 컴포넌트가 저수준 컴포넌트에 의존하게 되지 않고, 반대로 저수준 컴포넌트가 고수준 컴포넌트에 의존하게 됩니다.")]),_._v(" "),r("p",[r("img",{attrs:{src:t(457),alt:"이미지2"}})])])}),[],!1,null,null,null);v.default=s.exports}}]);