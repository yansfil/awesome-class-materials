(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{451:function(a,s,t){a.exports=t.p+"assets/img/hUtiB.1ea039a2.png"},491:function(a,s,t){"use strict";t.r(s);var e=t(24),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"squash-rebase-merge-브랜치를-머지할-때-머지-커밋을-남기기-싫어요"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#squash-rebase-merge-브랜치를-머지할-때-머지-커밋을-남기기-싫어요"}},[a._v("#")]),a._v(" [squash & rebase merge] 브랜치를 머지할 때 머지 커밋을 남기기 싫어요")]),a._v(" "),e("p",[a._v("두 브랜치를 합치는 방법에는 크게 3가지가 있습니다.")]),a._v(" "),e("ul",[e("li",[a._v("기본 Merge")]),a._v(" "),e("li",[a._v("Squash & Merge")]),a._v(" "),e("li",[a._v("Rebase & Merge")])]),a._v(" "),e("p",[a._v("이에 대해 알아봅시다.")]),a._v(" "),e("p",[e("img",{attrs:{src:t(451),alt:"enter image description here"}})]),a._v(" "),e("h2",{attrs:{id:"git-merge-브랜치-이름"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-브랜치-이름"}},[a._v("#")]),a._v(" "),e("code",[a._v("git merge {브랜치 이름}")])]),a._v(" "),e("p",[e("code",[a._v("git merge")]),a._v("는 가장 기본적인 머지 방식입니다.")]),a._v(" "),e("p",[a._v("기존 "),e("code",[a._v("main")]),a._v(" 브랜치로 부터 "),e("code",[a._v("feature-branch")]),a._v(" 브랜치를 만들어 둡니다.\n현재 main 브랜치는 다음과 같은 커밋 기록이 있습니다.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" switch -c feature-branch\n\n새로 만든 "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'feature-branch'")]),a._v(" 브랜치로 전환합니다\n\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" log --oneline\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("7404163")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("HEAD -"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" main, feature-branch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" c 파일을 추가한다\nc315709 b 파일을 추가한다\nb014111 a 파일을 추가한다\n")])])]),e("p",[a._v("이때 feature-branch에 a 파일을 수정하는 새로운 커밋을 만들어 둡니다.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ... 파일 수정 작업")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a 파일을 수정합니다"')]),a._v("\n")])])]),e("p",[a._v("이제 "),e("code",[a._v("feature-branch")]),a._v(" 브랜치에서 작업한 내용을 하나의 커밋으로 만들어 "),e("code",[a._v("main")]),a._v(" 브랜치에 합치고 싶습니다.\n이때 사용하는 명령어가 "),e("code",[a._v("git merge")]),a._v(" 입니다. 합치기 위해 먼저 "),e("code",[a._v("main")]),a._v(" 브랜치로 이동합니다.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v(" \n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" switch main\n\n"),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'main'")]),a._v(" 브랜치로 전환합니다\n")])])]),e("p",[a._v("만약 "),e("code",[a._v("main")]),a._v(" 브랜치로부터  "),e("code",[a._v("feature-branch")]),a._v(" 브랜치를 만든 이후, "),e("code",[a._v("main")]),a._v(" 브랜치에 추가 커밋이 없는 상태라면 다음처럼 "),e("code",[a._v("git merge")]),a._v(" 시 "),e("code",[a._v("feature-branch")]),a._v(" 의 모든 커밋이 그대로 "),e("code",[a._v("main")]),a._v(" 브랜치로 들어가게 됩니다. 이를  "),e("code",[a._v("fast-foward")]),a._v(" 방식이라고 합니다.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge feature-branch\n\n업데이트 중 b014111"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("c7591af\nFast-forward\n a "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" +\n b "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n c "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" files changed, "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" insertion"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("+"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n create mode "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" b\n create mode "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" c\n")])])]),e("p",[a._v("그러나 다음처럼 병합이 이뤄지기 전 "),e("code",[a._v("main")]),a._v(" 브랜치에 새로운 커밋이 생겼다고 합시다.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("touch")]),a._v(" d\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" d\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"d 파일을 추가한다"')]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("main 31b3b73"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" d 파일을 추가한다\n "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v(" changed, "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" insertions"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("+"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(", "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" deletions"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("-"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n create mode "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" d\n")])])]),e("p",[a._v("이제 이전처럼 "),e("code",[a._v("git merge")]),a._v(" 명령어를 입력하면 다음처럼 "),e("code",[a._v("merge")]),a._v(" 를 위한 머지 커밋이 생기게 됩니다.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge feature-branch\n\nMerge branch "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'feature-branch'")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Please enter a commit message to explain why this merge is necessary,")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# especially if it merges an updated upstream into a topic branch.")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Lines starting with '#' will be ignored, and an empty message aborts")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# the commit.")]),a._v("\nMerge made by the "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'recursive'")]),a._v(" strategy.\n a "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" +\n b "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n c "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" files changed, "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" insertion"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("+"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n create mode "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" b\n create mode "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" c\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# git log로 확인하면 Merge 내용을 나타내는 커밋이 생성되게 됩니다.")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" log --oneline\n\n85c04dc "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("HEAD -"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" main"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" Merge branch "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'feature-branch'")]),a._v("\n31b3b73 d 파일을 추가한다\nc7591af "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("feature-branch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" a 파일을 수정한다\nfc25d18 c 파일을 추가한다\n0379a06 b 파일을 추가한다\nb014111 a 파일을 추가한다\n")])])]),e("p",[a._v("머지 커밋을 통해 명시적으로 브랜치의 병합이 있었다는 걸 표시해주고 싶을 때 "),e("code",[a._v("git merge")]),a._v(" 방식을 많이 활용합니다.")]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),e("p",[e("strong",[a._v("merge conflict")])]),a._v(" "),e("p",[a._v("머지할 때 두 브랜치가 다음과 같은 상황일 때 Git은 충돌이 발생하는데 이를 Merge Conflict라고 합니다.")]),a._v(" "),e("ul",[e("li",[a._v("한 파일의 같은 라인을 고쳤을 때")]),a._v(" "),e("li",[a._v("한 브랜치에서는 파일을 삭제하고 한 브랜치에서는 파일을 변경할 때")])]),a._v(" "),e("p",[a._v("두 작업 내역을 합치는 Git의 입장에서는 같은 파일의 두 작업내역 중 어떤 사항으로 적용해야 할지 모릅니다. 따라서 Conflict가 난 파일을 해결(Resolve)해준 후 merge를 진행해야 합니다.")])]),a._v(" "),e("h2",{attrs:{id:"git-merge-브랜치-이름-squash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-브랜치-이름-squash"}},[a._v("#")]),a._v(" "),e("code",[a._v("git merge {브랜치 이름} --squash")])]),a._v(" "),e("p",[a._v("별다른 머지 커밋을 만들지 않고 변경 사항만 병합하고 싶은 경우가 있습니다. 이때 머지 커밋을 남기지 않으면서, 해당 브랜치에서 작업한 모든 내용을 하나의 커밋으로 묶어버릴 수는 없을까요?")]),a._v(" "),e("p",[a._v("이때 사용하는 머지 방식이 Squash & Merge 방식입니다. 명령어는 "),e("code",[a._v("git merge --sqaush")]),a._v(" 입니다. "),e("code",[a._v("squash")]),a._v(" 는 여러 커밋을 하나의 커밋으로 만들 때 주는 옵션인데, 브랜치 간 합칠 때 이 옵션을 주겠다는 의미입니다.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge feature-branch --squash\n\n커밋 합치기 -- HEAD를 업데이트하지 않습니다\n자동 병합이 잘 진행되었습니다. 요청한대로 커밋 전에 중지합니다\n\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"feature-branch 브랜치에서 작업한 내용을 합친다"')]),a._v(" \n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("main 1b8874f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" feature-branch 브랜치에서 작업한 내용을 합친다\n "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" files changed, "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" insertion"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("+"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n create mode "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" b\n create mode "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("100644")]),a._v(" c\n")])])]),e("p",[a._v("이제 다음처럼 "),e("code",[a._v("git log")]),a._v(" 로 커밋 내역을 확인해보면 "),e("code",[a._v("feature-branch")]),a._v(" 에서 작업한 커밋들을 위에서 작성한 하나의 커밋으로 만들어져서  "),e("code",[a._v("main")]),a._v(" 브랜치에 합쳐진 것을 확인할 수 있습니다.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" log --oneline\n\n1b8874f "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("HEAD -"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" main"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" feature-branch 브랜치에서 작업한 내용을 합친다\n31b3b73 d 파일을 추가한다\nb014111 c 파일을 추가한다\nb014111 b 파일을 추가한다\nb014111 a 파일을 추가한다\n")])])]),e("p",[e("code",[a._v("git merge --squash")]),a._v("로 하나의 커밋으로 묶어서 병합을 하게되면 브랜치의 커밋 구조를 깔끔하게 유지할 수 있습니다.\n다만 나중에 롤백 처리를 할 때 커밋을 한 번에 처리하는 게 불가능해지는 문제가 있습니다.")]),a._v(" "),e("br"),a._v(" "),e("h2",{attrs:{id:"git-rebase-브랜치-이름"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase-브랜치-이름"}},[a._v("#")]),a._v(" "),e("code",[a._v("git rebase {브랜치 이름}")])]),a._v(" "),e("p",[a._v("Rebase & Merge 방식은 "),e("code",[a._v("merge")]),a._v(" 할 때 "),e("code",[a._v("merge 커밋")]),a._v(" 을 남기지 않으면서도, "),e("code",[a._v("merge")]),a._v(" 되는 브랜치의 모든 커밋 내역을 그대로 가져오는 머지입니다. 명령어는 "),e("code",[a._v("git rebase")]),a._v(" 입니다.")]),a._v(" "),e("p",[a._v("위의 예시와 마찬가지로 "),e("code",[a._v("main")]),a._v(" 브랜치로부터 생성된 "),e("code",[a._v("feature-branch")]),a._v(" 브랜치에는 다음과 같은 작업내역이 있다고 합시다.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" log --oneline\n\nc7591af "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("feature-branch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" a 파일을 수정한다\nfc25d18 c 파일을 추가한다\n0379a06 b 파일을 추가한다\nb014111 a 파일을 추가한다\n")])])]),e("p",[a._v("위 두 머지 방식과 다르게 rebase의 경우 병합이 될 브랜치에서 "),e("code",[a._v("git rebase {대상 브랜치}")]),a._v("를 사용해주시면 됩니다")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" switch feature-branch\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" rebase main\n\nSuccessfully rebased and updated refs/heads/feature-branch.\n\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" log --oneline\n\n9cb8a3b "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("HEAD -"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" main, feature-branch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" a 파일을 추가한다\nc7591af d 파일을 추가한다\nfc25d18 c 파일을 추가한다\n0379a06 b 파일을 추가한다\nb014111 a 파일을 추가한다\n")])])]),e("p",[e("code",[a._v("git rebase")]),a._v("는 별다른 커밋을 생성하지 않고 브랜치의 커밋 구조를 변경한다고 보시면 됩니다.\n코드를 보는 입장에서는 깔끔할 수 있지만, 브랜치의 병합 히스토리가 명시적으로 잘 남지 않아 히스토리를 추적할 때 불편할 수 있습니다.")]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),e("p",[a._v("개발 팀에서 브랜치 관리 전략에 따라 각기 다른 머지를 사용합니다. 따라서 상황에 맞는 최적의 머지 방식을 사용하시면 됩니다.")])]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),e("p",[a._v("대표적인 원격 저장소(GitHub, Bitbucket)들은 브랜치 간 병합을 하기 전 코드를 리뷰할 수 있는 PR(Pull Request) 환경을 제공합니다.\n이때 squash, rebase merge 방식을 모두 지원합니다.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);