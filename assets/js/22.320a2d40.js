(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{455:function(t,s,a){t.exports=a.p+"assets/img/image-20210915211344836.d4bd6bd0.png"},518:function(t,s,a){"use strict";a.r(s);var r=a(24),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"테스트-기본-이해하기"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#테스트-기본-이해하기"}},[t._v("#")]),t._v(" 테스트 기본 이해하기")]),t._v(" "),r("h2",{attrs:{id:"개념"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#개념"}},[t._v("#")]),t._v(" 개념")]),t._v(" "),r("p",[t._v("테스트는 이름 그대로, 소프트웨어를 테스트하는 작업입니다. 소프트웨어에 숨겨진 버그는 없는지, 여러 명이 동시에 이용할 때에도 잘 견디는지 등의 문제들을 꼼꼼히 점검하는 일입니다.\n테스트를 거치지 않은 소프트웨어는 일반적으로 신뢰하기 어렵습니다. 실시간으로 언제 어디서 버그가 나올지 모릅니다.")]),t._v(" "),r("p",[t._v("이때 테스트 코드를 잘 작성해 둔다면, 버그에 견고한 코드를 작성할 수 있습니다. 같은 팀 개발자는 테스트를 보는 것만으로도 프로젝트의 전체적인 기능과 구조를 파악할 수 있게 됩니다.")]),t._v(" "),r("h2",{attrs:{id:"테스트의-종류"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#테스트의-종류"}},[t._v("#")]),t._v(" 테스트의 종류")]),t._v(" "),r("p",[t._v("개발자가 가장 많이 마주하게 되는 테스트는 크게 세 가지로 아래와 같습니다.")]),t._v(" "),r("p",[r("img",{attrs:{src:a(455),alt:"image-20210915211344836"}})]),t._v(" "),r("ul",[r("li",[t._v("유닛 테스트\n"),r("ul",[r("li",[t._v("유닛(Unit)이라는 말 그대로, 가장 작은 단위의 테스트입니다.")]),t._v(" "),r("li",[t._v("단일 기능을 가지는 함수, 클래스의 메서드가 잘 작동하는지 확인합니다.")]),t._v(" "),r("li",[t._v("테스트하고자 하는 코드는 다른 외부 컴포넌트(웹 서버, DB 등)에 의존성이 없어야 합니다.")]),t._v(" "),r("li",[t._v("가장 간단하고, 직관적이며, 빠르게 실행과 결과를 볼 수 있는 테스트입니다.")])])]),t._v(" "),r("li",[t._v("통합 테스트\n"),r("ul",[r("li",[t._v("통합(Integration)이라는 말 그대로, 여러 요소를 통합한 테스트를 말합니다.")]),t._v(" "),r("li",[t._v("데이터베이스와 연동한 코드가 잘 작동하는지, 여러 함수와 클래스가 엮인 로직이 잘 작동하는지 등을 확인합니다.")]),t._v(" "),r("li",[t._v("유닛 테스트보다는 복잡하고 느리지만, 소프트웨어는 결국 여러 코드 로직의 통합이라는 점에서 통합 테스트 역시 중요합니다.")])])]),t._v(" "),r("li",[t._v("E2E 테스트\n"),r("ul",[r("li",[t._v("E2E는 End To End의 약자로, 끝에서 끝, 즉 클라이언트 입장에서 테스트해보는 것입니다.")]),t._v(" "),r("li",[t._v("예를 들어 쇼핑몰 웹사이트의 경우, "),r("code",[t._v("/login")]),t._v(" 으로 POST 요청 시 로그인은 잘 되는지, "),r("code",[t._v("/order")]),t._v(" 로 POST 요청 시 주문 결과는 잘 나오는지 등을 확인합니다.")]),t._v(" "),r("li",[t._v("보통 유저 시나리오에 따라 테스트합니다.")]),t._v(" "),r("li",[t._v("테스트 중 가장 느리지만, 결국 소프트웨어를 사용하는건 유저이고, 유저 입장에서 해보는 테스트이므로, 역시 중요하다고 할 수 있습니다.")])])])]),t._v(" "),r("p",[t._v("보통 테스트는 유닛 -> 통합 -> E2E 순으로 작성하게 됩니다(꼭 정답이 있는 건 아닙니다) 작은 단위부터 테스트를 작성하면서 점점 통합적인 테스트를 진행하게 됩니다.")]),t._v(" "),r("p",[t._v("테스트 개수는 가장 작은 단위 테스트인 유닛 테스트가 가장 많고, E2E 테스트가 가장 적게 됩니다.")]),t._v(" "),r("blockquote",[r("p",[t._v("유닛 테스트로 추후에 어떠한 컴포넌트의 기능이 문제가 있는지 빠르게 찾아낼 수 있습니다. 한편 통합테스트로 프로그램의 로직 흐름에 이상이 없는지를 파악할 수 있습니다. E2E 테스트는 최종적으로 사용자 관점에서 사용하기에 기능적인 문제가 없는지 진행하는 테스트로 정리할 수 있습니다.")])]),t._v(" "),r("h2",{attrs:{id:"테스트-코드"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#테스트-코드"}},[t._v("#")]),t._v(" 테스트 코드")]),t._v(" "),r("p",[t._v("테스트의 종류에 대해서 얼핏 알았습니다. 이제 직접 위에서 배운 테스트를 실습해봅시다!"),r("br"),t._v("\n그런데 어떻게 테스트를 해볼 수 있을까요?")]),t._v(" "),r("p",[t._v("테스트 역시 코드로 구현할 수 있습니다. 이 강의에서는 파이썬의 대표적인 테스트 프레임워크인 "),r("code",[t._v("pytest")]),t._v("를 사용하겠습니다.")]),t._v(" "),r("p",[t._v("우선 "),r("code",[t._v("pytest")]),t._v("를 설치합니다.")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("$ pip "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" pytest\n")])])]),r("br"),t._v(" "),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# test_example.py")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 테스트 대상이 되는 함수입니다.")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 테스트를 시행할 코드입니다.")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_add")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" add"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# add(1, 1)의 출력이 2면 테스트를 통과합니다.")]),t._v("\n")])])]),r("p",[t._v("이제 셸에서 "),r("code",[t._v("pytest {파일 이름}")]),t._v(" 명령어로 위에서 작성한 테스트 코드를 실행시킬 수 있습니다.")]),t._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[t._v("$ python -m pytest test_example.py\n\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" session starts "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\nplatform darwin -- Python "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.8")]),t._v(".7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0 -- \ncachedir: .pytest_cache\ncollected "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" item                                                                                                                                                                               \n\ntest_example.py::test_add PASSED  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 테스트 통과에 성공했습니다.")]),t._v("\n")])])]),r("p",[r("code",[t._v("add(1, 1)")]),t._v(" 의 출력이 "),r("code",[t._v("2")]),t._v(" 였기 때문에 테스트가 통과했습니다."),r("br"),t._v("\n만약 출력값을 "),r("code",[t._v("2")]),t._v(" 가 아니라 "),r("code",[t._v("3")]),t._v(" 이랑 같은지 비교하면 어떻게 될까요? 코드를 수정해봅시다.")]),t._v(" "),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# test_example.py")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_add")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" add"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2 -> 3으로 수정")]),t._v("\n")])])]),r("p",[t._v("그리고 다시 다음처럼 "),r("code",[t._v("pytest")]),t._v(" 명령어를 실행합니다.")]),t._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[t._v("$ pythom -m pytest test_example.py      \n\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" session starts "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\nplatform darwin -- Python "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.8")]),t._v(".7, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\ncollected "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" item                                                                                                                                                                               \n\ntest_example.py F  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 테스트 통과에 실패했습니다.                                                                                                                                              [100%]")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" FAILURES "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" test_add "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\n\n    def test_add"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("       assert add"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(", "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nE       assert "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nE        +  where "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" add"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(", "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ntest_example.py:6: AssertionError\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" short "),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" summary info "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\nFAILED test_example.py::test_add - assert "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" failed "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(".03s "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\n")])])]),r("p",[t._v("이번에는 "),r("code",[t._v("F (Fail)")]),t._v(" 값을 내며 테스트가 실패했다고 나옵니다. 동시에 코드의 어느 부분에서 테스트가 실패했는지에 대한 정보가 나옵니다.")]),t._v(" "),r("p",[t._v("이렇게 테스트를 구현하는 코드를 "),r("code",[t._v("테스트 코드")]),t._v("라고 흔히 부릅니다.")]),t._v(" "),r("h2",{attrs:{id:"테스트-코드가-필요한-이유"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#테스트-코드가-필요한-이유"}},[t._v("#")]),t._v(" 테스트 코드가 필요한 이유")]),t._v(" "),r("p",[t._v("테스트 코드는 프로젝트의 코드를 테스트하기 위해 필요합니다. 하지만 테스트 코드는 단순히 테스트 실행 말고도 다음처럼 더 큰 의미들이 있습니다.")]),t._v(" "),r("ul",[r("li",[t._v("테스트 코드는 코드가 동작하기 위해 필요한 것들과 입/출력을 드러냅니다.\n"),r("ul",[r("li",[t._v("테스트는 테스트하고자 하는 코드의 클라이언트 중심으로 작성합니다. 즉 테스트하고자 하는 코드를 사용하려면 어떤 의존성이 필요한지, 어떤 입력을 주면 어떤 출력을 뱉는지 테스트 코드를 보면 알 수 있습니다.")]),t._v(" "),r("li",[t._v("따라서 "),r("strong",[t._v("테스트 코드는 프로젝트 코드에 대한 가장 정확한 문서가 됩니다.")]),t._v(" 테스트 코드만 보면, 코드를 돌리는데 필요한 것들을 알 수 있기 때문입니다.")]),t._v(" "),r("li",[t._v("이런 맥락에서, 누군가 개발한 코드를 볼 때 테스트 코드를 먼저 보면 로직을 파악하는 데 도움이 많이 됩니다. 테스트 코드는 이렇게 다른 개발자들을 위한 일종의 배려이기도 합니다.")])])]),t._v(" "),r("li",[t._v("테스트 코드는 리팩토링과 지속적인 개발을 위해 필수적입니다.\n"),r("ul",[r("li",[t._v("테스트 코드 없이 개발을 계속해서 해나가면, 추가로 개발한 코드가 기존 코드의 어떤 사이드 이펙트를 불러일으키는지 확인하기 어렵습니다.")]),t._v(" "),r("li",[t._v("테스트 코드를 만들어두면, 추가로 코드를 개발할 때마다, 기존 테스트 코드를 모두 실행함으로써 기존 코드의 작동 여부에 사이드 이펙트가 있는 지 빠르게 확인할 수 있습니다.")]),t._v(" "),r("li",[t._v("이런 맥락에서, "),r("strong",[t._v("테스트 코드는 일종의 안전망입니다.")]),t._v(" 테스트 코드 없이 개발을 계속해나가면 매번 리팩토링과 기능 개발을 할 때마다 마음을 졸이게 됩니다.\n"),r("br")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);