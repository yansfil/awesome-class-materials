(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{515:function(t,s,a){"use strict";a.r(s);var n=a(24),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"tdd-기본-개념-익히기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tdd-기본-개념-익히기"}},[t._v("#")]),t._v(" TDD 기본 개념 익히기")]),t._v(" "),a("h2",{attrs:{id:"tdd-정의"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tdd-정의"}},[t._v("#")]),t._v(" TDD 정의")]),t._v(" "),a("p",[t._v("TDD(Test Driven Development)는 테스트가 개발을 이끌어가는 방법론입니다. 즉, 테스트가 개발보다 선행하게 됩니다.")]),t._v(" "),a("p",[t._v("개발해야 하는 사항을 미리 정의하고, 각 기능의 입/출력을 미리 정한 뒤, 기능을 구현하는 프로세스는 아주 일반적인 개발 과정입니다.\n이때 TDD 방식으로 개발하게 된다면, 테스트 코드를 먼저 작성함으로써 개발사항과 각 기능의 입/출력 요구사항을 코드로 문서화한 후 기능을 개발하게 됩니다.")]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"tdd-예제"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tdd-예제"}},[t._v("#")]),t._v(" TDD 예제")]),t._v(" "),a("p",[t._v("간단하게 실습해 보겠습니다. 이전 시간의 예제와 동일합니다.")]),t._v(" "),a("p",[t._v("간단한 쇼핑몰 웹 사이트의 백엔드 서버에서 로그인 기능을 개발해야 하는 상황을 가정하겠습니다. 다음과 같은 요구사항이 있습니다.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("POST /login")]),t._v(" 으로 "),a("code",[t._v("user_id")]),t._v(" 와 "),a("code",[t._v("user_password")]),t._v(" 를 json을 실어 요청하면, "),a("code",[t._v("token")]),t._v(" 을 응답받아야 합니다.")]),t._v(" "),a("li",[a("code",[t._v("token")]),t._v("은 "),a("code",[t._v("user_id")]),t._v(" 에 "),a("code",[t._v('"_verifed"')]),t._v(" 가 붙은 문자열입니다.")])]),t._v(" "),a("p",[t._v("이제 위 요구사항 구현을 TDD로 진행해봅시다.")]),t._v(" "),a("h3",{attrs:{id:"_1-테스트-작성하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-테스트-작성하기"}},[t._v("#")]),t._v(" 1. 테스트 작성하기")]),t._v(" "),a("p",[t._v("위 요구사항을 테스트 코드로 작성하면 다음과 같습니다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" requests\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_login_endpoint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# given")]),t._v("\n    api_host "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:8000"')]),t._v("\n    payload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"grab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1234"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# when")]),t._v("\n    res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" requests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("api_host"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('/login"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" json"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("payload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"token"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"grab_verified"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("이 테스트 코드를 실행하면 당연히 실패할 것입니다. 아직 저희는 테스트 코드만 작성하고, 테스트할 대상을 작성하지 않았기 때문입니다.")]),t._v(" "),a("h3",{attrs:{id:"_2-테스트-대상-구현하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-테스트-대상-구현하기"}},[t._v("#")]),t._v(" 2. 테스트 대상 구현하기")]),t._v(" "),a("p",[t._v("이제 테스트할 대상인 서버를 구현해봅시다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" fastapi "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" FastAPI\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" dataclasses "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" dataclass\n\napp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" FastAPI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@dataclass")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LoginRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v("\n    password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v("\n        \n        \n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/login"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("login_endpoint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" LoginRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    user_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),t._v("\n    user_password "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("password\n    \n    user_repository "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UserRepository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DB와 연동되어 User 정보를 저장하고 불러오는 객체")]),t._v("\n    user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user_repository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("find_by_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" user_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("password "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" user_password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        token "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"_verified"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" Exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"로그인 인증에 실패했습니다."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"token"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" token\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("테스트가 통과하도록 서버 로직을 구현했습니다. 이제 서버를 실행시킨 뒤, 테스트 코드를 실행하면 테스트는 성공할 것입니다.")]),t._v(" "),a("h3",{attrs:{id:"_3-테스트-대상-리팩토링하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-테스트-대상-리팩토링하기"}},[t._v("#")]),t._v(" 3. 테스트 대상 리팩토링하기")]),t._v(" "),a("p",[t._v("테스트는 성공해서 모든 일이 끝난 것처럼 보입니다. 하지만 위 서버 코드는 현재 하나의 모듈에 너무 많은 내용을 담고있는 것 같아, SRP 원칙에 위배됩니다.\n기존 코드를 좀 더 구조적으로 리팩토링하고 싶습니다. 그래서 다음처럼 코드를 분리해보려고 합니다.")]),t._v(" "),a("ul",[a("li",[t._v("http 요청과 응답을 주고 받는 책임을 담당하는 함수")]),t._v(" "),a("li",[t._v("로그인 로직을 실행을 담당하는 함수")]),t._v(" "),a("li",[t._v("토큰 생성 로직을 담당하는 함수")])]),t._v(" "),a("p",[t._v('먼저 "로그인 로직을 실행을 담당하는 함수"를 '),a("code",[t._v("login()")]),t._v(" 으로 정의해봅시다. 테스트 코드로 "),a("code",[t._v("login()")]),t._v(" 함수의 입/출력을 정의하는 것으로 시작합니다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_login_successful")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# given")]),t._v("\n    user_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"grab"')]),t._v("\n    user_password "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1234"')]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# when")]),t._v("\n    actual "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" login"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user_password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" actual "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"grab_verified"')]),t._v("\n    \n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_login_failed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# given")]),t._v("\n    user_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"grab"')]),t._v("\n    user_password "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wrong password"')]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# when & then")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" pytest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("raises"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        login"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user_password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("아직 "),a("code",[t._v("login()")]),t._v(" 함수를 구현하지 않았기 때문에 위 두 테스트는 실패합니다."),a("br"),t._v("\n이제 "),a("code",[t._v("login")]),t._v(" 함수를 다음처럼 구현합니다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("login")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user_password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    user_repository "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UserRepository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DB와 연동되어 User 정보를 저장하고 불러오는 객체")]),t._v("\n    user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user_repository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("find_by_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" user_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("password "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" user_password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 토큰 생성 로직은 create_token() 함수에 위임합니다.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" create_token"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" Exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"로그인 인증에 실패했습니다."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v('마지막으로 "토큰 생성 로직을 담당하는 함수"를 '),a("code",[t._v("create_token()")]),t._v(" 으로 정의해봅시다. 마찬가지로 테스트 코드로 "),a("code",[t._v("create_token()")]),t._v(" 함수의 입/출력 정의하는 것으로 시작합니다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_create_token")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    actual "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" create_token"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"grab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    expected "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"grab_verified"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" actual "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" expected\n")])])]),a("p",[t._v("이제 "),a("code",[t._v("create_token()")]),t._v(" 함수의 구현을 작성해봅시다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create_token")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" user_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"_verified"')]),t._v("\n")])])]),a("p",[t._v("마지막으로 http 요청과 응답을 주고 받는, 기존 "),a("code",[t._v("login_endpoint")]),t._v(" 함수를 리팩토링 합니다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" fastapi "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" FastAPI\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" dataclasses "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" dataclass\n\napp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" FastAPI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@dataclass")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LoginRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v("\n    password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v("\n        \n        \n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/login"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("login_endpoint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" LoginRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 로그인 로직은 login() 함수에 위임합니다.")]),t._v("\n    token "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" login"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user_password"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"token"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" token\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("이제 모두 구현되었기 때문에 작성한 모든 테스트는 성공합니다.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("예시에서 코드를 Top-Down 방식으로 작성하였습니다. Bottom-Up 방식으로 내부 로직부터 코드를 작성하는 방식으로도 진행할 수 있습니다.")])]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"tdd와-레드-그린-리팩토링"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tdd와-레드-그린-리팩토링"}},[t._v("#")]),t._v(" TDD와 레드-그린-리팩토링")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://miro.medium.com/max/1024/1*749GtQGqamkOqfOe40o_Tg.png",alt:""}})]),t._v(" "),a("p",[t._v('위 예제에서 우리가 진행한 방식은 TDD에서 말하는 "레드-그린-리팩토링" 입니다. 레드-그린 리팩토링의 과정은 다음과 같습니다.')]),t._v(" "),a("ol",[a("li",[t._v("테스트를 먼저 작성합니다.\n"),a("ul",[a("li",[t._v("테스트할 대상은 아직 구현되지 않았으므로, 테스트는 실패합니다. (실패는 보통 빨간색으로 표현됩니다)")])])]),t._v(" "),a("li",[t._v("테스트가 통과되도록 코드를 작성합니다.\n"),a("ul",[a("li",[t._v("구현이 완료되면 테스트는 성공합니다 (성공은 보통 초록색으로 표현됩니다)")])])]),t._v(" "),a("li",[t._v("기존 코드를 필요에 따라 리팩토링합니다.\n"),a("ul",[a("li",[t._v("리팩토링은 기존 동작에 영향을 주면 안 됩니다. 다시 말하면, 입/출력은 변하지 않고, 내부적인 동작만 바꾸어야 합니다.")]),t._v(" "),a("li",[t._v("리팩토링은 종종 사이드이펙트를 불러오기도 합니다.")]),t._v(" "),a("li",[t._v("하지만 테스트 코드로 이런 사이드 이펙트를 확인할 수 있습니다. 리팩토링하다가 동작에 문제가 생긴다면, 테스트는 실패할 것입니다.")]),t._v(" "),a("li",[t._v("한편, 리팩토링을 성공적으로 했다면 기존 테스트 역시 성공합니다.")])])])]),t._v(" "),a("p",[t._v('이처럼 TDD를 하게 되면 실패 -> 성공 -> 리팩토링의 순환을 가지는 "레드-그린-리팩토링" 순서로 개발을 진행하게 됩니다.')]),t._v(" "),a("blockquote",[a("p",[t._v("*"),a("strong",[t._v("로버트 마틴의 TDD 3가지 법칙")])]),t._v(" "),a("ol",[a("li",[t._v("실패한 단위 테스트를 만들기 전에는 제품 코드를 만들지 않는다.")]),t._v(" "),a("li",[t._v("컴파일이 안 되거나 실패한 단위 테스트가 있으면 더 이상 단위 테스트를 만들지 않는다.")]),t._v(" "),a("li",[t._v("실패한 단위 테스트를 통과하는 이상의 제품 코드는 만들지 않는다.")])])]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"tdd의-장단점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tdd의-장단점"}},[t._v("#")]),t._v(" TDD의 장단점")]),t._v(" "),a("p",[t._v("TDD로 인한 장점은 다음과 같습니다.")]),t._v(" "),a("ul",[a("li",[t._v("개발하고자 하는 대상에서 기대하는 것을 테스트 코드로 미리 명확하게 정의할 수 있습니다.\n"),a("ul",[a("li",[t._v('소프트웨어를 개발할 때 중요한 것은 이 소프트웨어가 "어떻게"가 돌아가느냐가 아니라 "무엇을" 제공해줄 것이냐 입니다.')]),t._v(" "),a("li",[t._v("테스트 코드로 먼저 작성하면 입/출력과 발생하는 예외를 무엇으로 정의해야 할지 먼저 명확하게 정의할 수 있습니다.")]),t._v(" "),a("li",[t._v("덕분에 좀 더 사용하는 쪽의 코드나 사람 입장에서 사용하기 좋은 코드를 작성할 수 있게 됩니다.")])])]),t._v(" "),a("li",[t._v("테스트를 훨씬 꼼꼼히 작성하게 됩니다.\n"),a("ul",[a("li",[t._v("테스트 코드는 사실 작성하기 번거로운 존재입니다. 특히 구현을 먼저하고 테스트를 작성하면, 테스트 작성에 느슨해지고, 자칫 예외나 몇몇 시나리오에 대한 테스트를 놓칠 수 있습니다.")]),t._v(" "),a("li",[t._v("TDD로 진행하게 되면, 테스트를 먼저 작성하기 때문에, 테스트 코드를 누락시킬 빈도가 낮아집니다.")]),t._v(" "),a("li",[t._v("테스트 코드가 탄탄하게 있기 때문에, 리팩토링도 겁먹지 않고 진행할 수 있습니다.")])])]),t._v(" "),a("li",[t._v("테스트 코드가 깔끔한 코드 사용 문서가 됩니다.\n"),a("ul",[a("li",[t._v("TDD에서 테스트 코드는 테스트할 대상의 구현을 모른 채 작성되기 때문에, 철저히 사용자 중심적으로 작성됩니다.")]),t._v(" "),a("li",[t._v("따라서 테스트 코드는 코드를 사용하기 위해 필요한 최소한의 내용만 담게 됩니다.")])])])]),t._v(" "),a("p",[t._v("TDD로 인한 단점은 다음과 같습니다.")]),t._v(" "),a("ul",[a("li",[t._v("테스트가 가능하도록 코드를 설계하는 것은 어렵습니다.\n"),a("ul",[a("li",[t._v("TDD를 진행하게 되면 모든 코드들을 테스트 가능하도록 설계해야 합니다.")]),t._v(" "),a("li",[t._v("테스트 가능하도록 코드를 설계하려면, 추상화, 의존성 주입 등을 잘 활용해야 합니다.")]),t._v(" "),a("li",[t._v("또한 테스트 환경을 제대로 구축하는 것 (Docker compose, DB 데이터 초기화 등)의 작업은 꽤나 번거롭습니다.")])])]),t._v(" "),a("li",[t._v("익숙하지 않은 채 TDD를 진행하면, 개발 프로세스가 느려질 수 있습니다.\n"),a("ul",[a("li",[t._v("위에서 말했듯, 테스트 가능한 코드와 테스트 환경을 만드는 것 자체가 어려운 일입니다.")]),t._v(" "),a("li",[t._v("구현 로직보다 테스트 코드를 작성하고 고민히는데 훨씬 시간이 많이 들 수 있습니다.")])])])]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"정리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#정리"}},[t._v("#")]),t._v(" 정리")]),t._v(" "),a("ul",[a("li",[t._v("TDD는 테스트가 구현을 선행하는 개발 프로세스입니다.")]),t._v(" "),a("li",[t._v("TDD를 하게 되면 보통 레드-그린-리팩토링 순서로 개발을 진행하게 됩니다.")]),t._v(" "),a("li",[t._v("TDD를 하면 꼼꼼한 테스트를 통해 코드 품질과 테스트 코드의 문서화 품질이 올라갑니다.")]),t._v(" "),a("li",[t._v("하지만 그만큼 테스트 가능한 코드와 테스트 환경을 갖추는 일은 어렵습니다.")])])])}),[],!1,null,null,null);s.default=r.exports}}]);