(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{488:function(t,s,a){"use strict";a.r(s);var e=a(24),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"restore-reset-변경사항-커밋을-초기화하고-싶어요"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restore-reset-변경사항-커밋을-초기화하고-싶어요"}},[t._v("#")]),t._v(" [restore & reset] 변경사항, 커밋을 초기화하고 싶어요")]),t._v(" "),a("p",[t._v("다음과 같이 두 개의 커밋이 있는 상황에서, 우리는 "),a("code",[t._v("a 파일을 추가한다")]),t._v(" 커밋 시점으로 초기화하고 싶습니다.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline\n\nc008c47 a 파일을 수정한다\nb014111 a 파일을 추가한다\n")])])]),a("p",[t._v("이때 "),a("code",[t._v("git reset")]),t._v(" 명령어를 사용하면 됩니다. "),a("code",[t._v("git reset")]),t._v(" 명령어는 아래와 같은 옵션을 가지고 있습니다.")]),t._v(" "),a("h2",{attrs:{id:"git-reset-hard-커밋-id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-hard-커밋-id"}},[t._v("#")]),t._v(" "),a("code",[t._v("git reset --hard {커밋 ID}")])]),t._v(" "),a("p",[t._v("특정 커밋 시점으로 돌아갈 때, 해당 커밋 이후 만들어진 모든 작업물을 삭제합니다.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard b014111 \n\nHEAD의 현재 위치는 b014111입니다 a 파일을 추가한다\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline\n\nb014111 a 파일을 추가한다\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n현재 브랜치 main\n커밋할 사항 없음, 작업 폴더 깨끗함\n")])])]),a("p",[t._v("현재 작업한 파일들을 모두 날리고 이전 커밋 상태로 완전히 돌아가고 싶을 때 사용하지만, 기존에 작성하던 변경사항들도 전부 날아가기 때문에 주의해야 합니다.")]),t._v(" "),a("h2",{attrs:{id:"git-reset-mixed-커밋-id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-mixed-커밋-id"}},[t._v("#")]),t._v(" "),a("code",[t._v("git reset --mixed {커밋 ID}")])]),t._v(" "),a("p",[t._v("특정 커밋 시점으로 돌아갈 때, 해당 커밋 이후 모든 작업물은 "),a("code",[t._v("workspace")]),t._v(" 공간에 unstaged 상태로 남게 됩니다.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset b014111 --mixed\n\n리셋 뒤에 스테이징하지 않은 변경 사항:\nM\ta\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline\n\nb014111 a 파일을 추가한다\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n현재 브랜치 main\n커밋하도록 정하지 않은 변경 사항:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("무엇을 커밋할지 바꾸려면 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <파일>..."')]),t._v("을 사용하십시오"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git restore <file>..."')]),t._v(" to discard changes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t수정함:        a\n\n커밋할 변경 사항을 추가하지 않았습니다 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" 및/또는 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git commit -a"')]),t._v("를 사용하십시오"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("--mixed")]),t._v(" 옵션은 기본 "),a("code",[t._v("git reset")]),t._v(" 의 기본 옵션으로 "),a("code",[t._v("git reset")]),t._v(" 만 실행해도 똑같습니다.")]),t._v(" "),a("h2",{attrs:{id:"git-reset-soft-커밋-id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-soft-커밋-id"}},[t._v("#")]),t._v(" "),a("code",[t._v("git reset --soft {커밋 ID}")])]),t._v(" "),a("p",[t._v("특정 커밋 시점으로 돌아갈 때, 해당 커밋 이후 모든 작업물은 "),a("code",[t._v("index")]),t._v(" 공간에 staged 상태로 남게 됩니다.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset b014111 --soft\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline\n\nb014111 a 파일을 추가한다\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n현재 브랜치  main\n커밋할 변경 사항:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git restore --staged <file>..."')]),t._v(" to unstage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t수정함:        a\n")])])]),a("h2",{attrs:{id:"git-restore-파일-경로"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-restore-파일-경로"}},[t._v("#")]),t._v(" "),a("code",[t._v("git restore {파일 경로}")])]),t._v(" "),a("p",[t._v("특정 파일의 변경사항을 제거하고 HEAD 기준으로 되돌리고 싶을 때, restore를 사용할 수 있습니다.")]),t._v(" "),a("p",[t._v("workspace에 있는 변경 사항을 되돌릴 때 : "),a("code",[t._v("git restore {파일경로}")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 아직 stage(index)에 올라가지 않은 README.md 파일을 되돌릴 때  ")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" restore README.md\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("code",[t._v("git restore")]),t._v("는 "),a("code",[t._v("git reset --hard HEAD")]),t._v("와 비슷한 결과를 냅니다."),a("br"),t._v("\n다만 restore는 새 파일의 변경사항을 되돌리지 않지만, reset은 새 파일의 변경사항도 되돌립니다.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);